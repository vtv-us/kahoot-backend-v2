// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: answer.sql

package repositories

import (
	"context"
)

const createAnswer = `-- name: CreateAnswer :one
INSERT INTO "answer" (
    id,
    question_id,
    index,
    raw_answer,
    created_at,
    updated_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    now(),
    now()
)
RETURNING id, question_id, index, raw_answer, created_at, updated_at
`

type CreateAnswerParams struct {
	ID         string `json:"id"`
	QuestionID string `json:"question_id"`
	Index      int16  `json:"index"`
	RawAnswer  string `json:"raw_answer"`
}

func (q *Queries) CreateAnswer(ctx context.Context, arg CreateAnswerParams) (Answer, error) {
	row := q.db.QueryRowContext(ctx, createAnswer,
		arg.ID,
		arg.QuestionID,
		arg.Index,
		arg.RawAnswer,
	)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.QuestionID,
		&i.Index,
		&i.RawAnswer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAnswer = `-- name: DeleteAnswer :exec
DELETE FROM "answer" WHERE id = $1
`

func (q *Queries) DeleteAnswer(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAnswer, id)
	return err
}

const deleteAnswersByQuestion = `-- name: DeleteAnswersByQuestion :exec
DELETE FROM "answer" WHERE question_id = $1
`

func (q *Queries) DeleteAnswersByQuestion(ctx context.Context, questionID string) error {
	_, err := q.db.ExecContext(ctx, deleteAnswersByQuestion, questionID)
	return err
}

const deleteAnswersBySlide = `-- name: DeleteAnswersBySlide :exec
DELETE FROM "answer" WHERE question_id IN (
    SELECT id FROM "question" WHERE slide_id = $1
)
`

func (q *Queries) DeleteAnswersBySlide(ctx context.Context, slideID string) error {
	_, err := q.db.ExecContext(ctx, deleteAnswersBySlide, slideID)
	return err
}

const getAnswer = `-- name: GetAnswer :one
SELECT id, question_id, index, raw_answer, created_at, updated_at FROM "answer" WHERE id = $1
`

func (q *Queries) GetAnswer(ctx context.Context, id string) (Answer, error) {
	row := q.db.QueryRowContext(ctx, getAnswer, id)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.QuestionID,
		&i.Index,
		&i.RawAnswer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAnswerByQuestionAndIndex = `-- name: GetAnswerByQuestionAndIndex :one
SELECT id, question_id, index, raw_answer, created_at, updated_at FROM "answer" WHERE question_id = $1 AND index = $2
`

type GetAnswerByQuestionAndIndexParams struct {
	QuestionID string `json:"question_id"`
	Index      int16  `json:"index"`
}

func (q *Queries) GetAnswerByQuestionAndIndex(ctx context.Context, arg GetAnswerByQuestionAndIndexParams) (Answer, error) {
	row := q.db.QueryRowContext(ctx, getAnswerByQuestionAndIndex, arg.QuestionID, arg.Index)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.QuestionID,
		&i.Index,
		&i.RawAnswer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAnswersByQuestion = `-- name: GetAnswersByQuestion :many
SELECT id, question_id, index, raw_answer, created_at, updated_at FROM "answer" WHERE question_id = $1
ORDER BY index ASC
`

func (q *Queries) GetAnswersByQuestion(ctx context.Context, questionID string) ([]Answer, error) {
	rows, err := q.db.QueryContext(ctx, getAnswersByQuestion, questionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Answer{}
	for rows.Next() {
		var i Answer
		if err := rows.Scan(
			&i.ID,
			&i.QuestionID,
			&i.Index,
			&i.RawAnswer,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnswer = `-- name: UpdateAnswer :one
UPDATE "answer" SET
    index = $2,
    raw_answer = $3,
    updated_at = now()
WHERE id = $1
RETURNING id, question_id, index, raw_answer, created_at, updated_at
`

type UpdateAnswerParams struct {
	ID        string `json:"id"`
	Index     int16  `json:"index"`
	RawAnswer string `json:"raw_answer"`
}

func (q *Queries) UpdateAnswer(ctx context.Context, arg UpdateAnswerParams) (Answer, error) {
	row := q.db.QueryRowContext(ctx, updateAnswer, arg.ID, arg.Index, arg.RawAnswer)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.QuestionID,
		&i.Index,
		&i.RawAnswer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
