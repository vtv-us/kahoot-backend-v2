// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: chat.sql

package repositories

import (
	"context"
)

const getChatBySlide = `-- name: GetChatBySlide :many
SELECT id, slide_id, username, content, created_at FROM "chat_msg" WHERE slide_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetChatBySlide(ctx context.Context, slideID string) ([]ChatMsg, error) {
	rows, err := q.db.QueryContext(ctx, getChatBySlide, slideID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChatMsg{}
	for rows.Next() {
		var i ChatMsg
		if err := rows.Scan(
			&i.ID,
			&i.SlideID,
			&i.Username,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveChat = `-- name: SaveChat :one
INSERT INTO "chat_msg" (
    id,
    slide_id,
    username,
    content,
    created_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    now()
)
RETURNING id, slide_id, username, content, created_at
`

type SaveChatParams struct {
	ID       string `json:"id"`
	SlideID  string `json:"slide_id"`
	Username string `json:"username"`
	Content  string `json:"content"`
}

func (q *Queries) SaveChat(ctx context.Context, arg SaveChatParams) (ChatMsg, error) {
	row := q.db.QueryRowContext(ctx, saveChat,
		arg.ID,
		arg.SlideID,
		arg.Username,
		arg.Content,
	)
	var i ChatMsg
	err := row.Scan(
		&i.ID,
		&i.SlideID,
		&i.Username,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}
