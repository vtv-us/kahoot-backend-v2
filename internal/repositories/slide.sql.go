// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: slide.sql

package repositories

import (
	"context"
)

const checkSlidePermission = `-- name: CheckSlidePermission :one
SELECT EXISTS (
    SELECT 1
    FROM "slide"
    WHERE id = $1
    AND (
        owner = $2
        OR EXISTS (
            SELECT 1
            FROM "collab"
            WHERE user_id = $2
            AND slide_id = $1
        )
    )
) AS is_permitted
`

type CheckSlidePermissionParams struct {
	ID    string `json:"id"`
	Owner string `json:"owner"`
}

func (q *Queries) CheckSlidePermission(ctx context.Context, arg CheckSlidePermissionParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkSlidePermission, arg.ID, arg.Owner)
	var is_permitted bool
	err := row.Scan(&is_permitted)
	return is_permitted, err
}

const createSlide = `-- name: CreateSlide :one
INSERT INTO "slide" (
    id,
    owner,
    title,
    content
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, owner, title, content, created_at, updated_at
`

type CreateSlideParams struct {
	ID      string `json:"id"`
	Owner   string `json:"owner"`
	Title   string `json:"title"`
	Content string `json:"content"`
}

func (q *Queries) CreateSlide(ctx context.Context, arg CreateSlideParams) (Slide, error) {
	row := q.db.QueryRowContext(ctx, createSlide,
		arg.ID,
		arg.Owner,
		arg.Title,
		arg.Content,
	)
	var i Slide
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSlide = `-- name: DeleteSlide :exec
DELETE FROM "slide" WHERE id = $1
`

func (q *Queries) DeleteSlide(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSlide, id)
	return err
}

const getSlide = `-- name: GetSlide :one
SELECT id, owner, title, content, created_at, updated_at FROM "slide" WHERE id = $1
`

func (q *Queries) GetSlide(ctx context.Context, id string) (Slide, error) {
	row := q.db.QueryRowContext(ctx, getSlide, id)
	var i Slide
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSlidesByOwner = `-- name: GetSlidesByOwner :many
SELECT id, owner, title, content, created_at, updated_at FROM "slide" WHERE owner = $1
`

func (q *Queries) GetSlidesByOwner(ctx context.Context, owner string) ([]Slide, error) {
	rows, err := q.db.QueryContext(ctx, getSlidesByOwner, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Slide{}
	for rows.Next() {
		var i Slide
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSlide = `-- name: UpdateSlide :one
UPDATE "slide" SET
    title = $2,
    content = $3,
    updated_at = now()
WHERE id = $1
RETURNING id, owner, title, content, created_at, updated_at
`

type UpdateSlideParams struct {
	ID      string `json:"id"`
	Title   string `json:"title"`
	Content string `json:"content"`
}

func (q *Queries) UpdateSlide(ctx context.Context, arg UpdateSlideParams) (Slide, error) {
	row := q.db.QueryRowContext(ctx, updateSlide, arg.ID, arg.Title, arg.Content)
	var i Slide
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
