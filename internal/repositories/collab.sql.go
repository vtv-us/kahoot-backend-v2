// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: collab.sql

package repositories

import (
	"context"
)

const addCollab = `-- name: AddCollab :exec
INSERT INTO "collab" (
  user_id,
  slide_id
) VALUES (
  $1, $2
)
`

type AddCollabParams struct {
	UserID  string `json:"user_id"`
	SlideID string `json:"slide_id"`
}

func (q *Queries) AddCollab(ctx context.Context, arg AddCollabParams) error {
	_, err := q.db.ExecContext(ctx, addCollab, arg.UserID, arg.SlideID)
	return err
}

const checkIsCollab = `-- name: CheckIsCollab :one
SELECT EXISTS (
  SELECT 1
  FROM "collab"
  WHERE user_id = $1
  AND slide_id = $2
) AS is_collab
`

type CheckIsCollabParams struct {
	UserID  string `json:"user_id"`
	SlideID string `json:"slide_id"`
}

func (q *Queries) CheckIsCollab(ctx context.Context, arg CheckIsCollabParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkIsCollab, arg.UserID, arg.SlideID)
	var is_collab bool
	err := row.Scan(&is_collab)
	return is_collab, err
}

const listCollab = `-- name: ListCollab :many
SELECT g.id, g.owner, g.title, g.content, g.created_at, g.updated_at
FROM "collab" c
JOIN "slide" g on g.id = c.slide_id
WHERE c.user_id = $1
`

func (q *Queries) ListCollab(ctx context.Context, userID string) ([]Slide, error) {
	rows, err := q.db.QueryContext(ctx, listCollab, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Slide{}
	for rows.Next() {
		var i Slide
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCollabBySlide = `-- name: ListCollabBySlide :many
SELECT u.user_id, u.email, u.name, u.password, u.verified, u.verified_code, u.created_at, u.google_id, u.facebook_id, u.avatar_url
FROM "collab" c
JOIN "user" u using (user_id)
WHERE c.slide_id = $1
`

func (q *Queries) ListCollabBySlide(ctx context.Context, slideID string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listCollabBySlide, slideID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Email,
			&i.Name,
			&i.Password,
			&i.Verified,
			&i.VerifiedCode,
			&i.CreatedAt,
			&i.GoogleID,
			&i.FacebookID,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCollab = `-- name: RemoveCollab :exec
DELETE FROM "collab"
WHERE user_id = $1
AND slide_id = $2
`

type RemoveCollabParams struct {
	UserID  string `json:"user_id"`
	SlideID string `json:"slide_id"`
}

func (q *Queries) RemoveCollab(ctx context.Context, arg RemoveCollabParams) error {
	_, err := q.db.ExecContext(ctx, removeCollab, arg.UserID, arg.SlideID)
	return err
}
